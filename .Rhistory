rm(list=ls())
library(sp)
.libPaths("C:/R Packages")
library(sp)
library(sf)
install.packages("sp", "sf", "lubridate", "amt", "rgdal", "raster", dependencies = T)
install.packages("sp", "sf", "lubridate", "amt", "rgdal", "raster", dependencies = T)
install.packages("sf", "lubridate", "amt", "rgdal", "raster", dependencies = T)
.libPaths()
library(installr)
install.packages(c("sf", "lubridate", "amt", "rgdal", "raster"), dependencies = T)
library(sp)
library(sf)
library("sf", dependencies = T)
library("sf", dependencies = T)
install.packages("sf", dependencies = T)
library(sf)
install.packages("classInt")
install.packages("classInt", dependencies = T)
library(sf)
install.packages("e1071")
library(sf)
require(sf)
?require
install.packages("magrittr")
library(sf)
library(lubridate)
install.packages("generics")
install.packages("lubridate", dependencies = T)
install.packages("lubridate", dependencies = T)
library(lubridate)
library(amt)
install.packages("rlang")
library(amt)
install.packages("R6")
library(amt)
install.packages("glue")
library(amt)
install.packages("lifecycle")
library(amt)
install.packages("tibble")
library(amt)
install.packages("crayon")
library(amt)
install.packages("pkgconfig")
library(amt)
install.packages("tidyselect")
library(amt)
install.packages("purrr")
library(amt)
install.packages("lazyeval")
library(amt)
library(rgdal)
library(raster)
library(sp)
library(sf)
library(lubridate)
library(amt)
library(rgdal)
library(raster)
### Revvy animation ####
library(anipaths)
install.packages("gtable")
### Revvy animation ####
library(anipaths)
install.packages("munsell")
### Revvy animation ####
library(anipaths)
install.packages("colorspace")
### Revvy animation ####
library(anipaths)
install.packages("RgoogleMaps")
### Revvy animation ####
library(anipaths)
update.packages()
update.packages(ask = F)
.libPaths()
update.packages(ask = F)
### Revvy animation ####
library(anipaths)
to_install <- unname(installed.packages()[, "Package"])
install.packages(pkgs = to_install)
install.packages(pkgs = to_install)
.libPaths("C:/R Packages")
library(collar)
library(stringr)
library(tibble)
library(lubridate)
library(lubridate)
rm(list=ls())
.libPaths("C:/R Packages")
library(lubridate)
install.packages("lubridate")
library(lubridate)
install.packages("tidyverse")
library(tidyverse)
library(rlang)
sys.info()
Sys.info()
.libPaths("C:/R Packages")
.libPaths()
.libPaths("C:/R_Packages")
.libPaths()
install.packages("rgdal")
.libPaths("C:/R_Packages")
shiny::runApp('Z:/ES/WILDLIFE 2016-2020/Monitoring multi-species/Collar Download Code_TEST')
runApp('Z:/ES/WILDLIFE 2016-2020/Monitoring multi-species/Collar Download Code_TEST')
input$inputsDateRange
input$inputsDateRange[1]
class(input$inputsDateRange[1])
data$Local_AcquisitionDateTime <- with_tz(data$UTC_AcquisitionDateTime, tz)
data$Local_SCTSDateTime <- with_tz(data$UTC_SCTSDateTime, tz)
time.int <- interval(start = input$inputsDateRange[1], end = input$inputsDateRange[2])
runApp('Z:/ES/WILDLIFE 2016-2020/Monitoring multi-species/Collar Download Code_TEST')
runApp('Z:/ES/WILDLIFE 2016-2020/Monitoring multi-species/Collar Download Code_TEST')
runApp('Z:/ES/WILDLIFE 2016-2020/Monitoring multi-species/Collar Download Code_TEST')
runApp('Z:/ES/WILDLIFE 2016-2020/Monitoring multi-species/Collar Download Code_TEST')
?order
runApp('Z:/ES/WILDLIFE 2016-2020/Monitoring multi-species/Collar Download Code_TEST')
runApp('Z:/ES/WILDLIFE 2016-2020/Monitoring multi-species/Collar Download Code_TEST')
runApp('Z:/ES/WILDLIFE 2016-2020/Monitoring multi-species/Collar Download Code_TEST')
runApp('Z:/ES/WILDLIFE 2016-2020/Monitoring multi-species/Collar Download Code_TEST')
.libPaths("C:/R_Packages")
.libPaths("C:/R_Packages")
rm(list=ls())
source("C:/R_Projects/R Speedup.R")
source("C:/R_Projects/R Speedup.R")
#### 2019 New Data Format #####
setwd("Z:/ES/WILDLIFE 2016-2020/Harvest management/Harvest data/Hunter Sample/2020")
file <- "HS estimates 1976 to 2020 - preliminary - v3.xlsx"
wmus <- read_excel(path = file, sheet = "WMU level")
regions <- read_excel(path = file, sheet = "Region level")
province <- read_excel(path = file, sheet = "Province Level")
data <- rbind(wmus, regions, province)
speciescode <- unique(data$Species)
species <- c("Black Bear", "Grizzly Bear", "Blue Grouse", "BTPI", "Caribou", "Chukar", "Cougar", "All Deer",
"Ducks", "Elk", "Mountain Goat", "Geese", "Mourning Dove", "Moose", "Pheasant", "Quail", "Ruffed Grouse",
"Sheep", "Spruce Grouse", "Sharp-tailed Grouse", "Wolf", "GRPA", "Ptarmigan", "Mule Deer",
"White-tailed Deer", "PART", "Turkey")
ss <- data$Species
fss <- vector(length = length(ss))
for(i in 1:length(ss)) fss[i] <- species[which(speciescode %in% ss[i])]
data$Species <- fss
rm(ss, fss, speciescode, species)
data$WMU[data$WMU == "7A"] <- "799.1"
data$WMU[data$WMU == "7B"] <- "799.2"
setwd("Z:/ES/WILDLIFE 2016-2020/Harvest management/Harvest data/Data Code/Shiny App/Data and Mapping App/HS Data Formatting")
saveRDS(data, "HarvestData2020.rds")
### HarvList, SuccessList, and EffortList ###
data <- readRDS("HarvestData2020.rds")
wmus.all <- readRDS("ProvincialWMUs.rds")
datayears <- data$Year
dataunits <- data$WMU
dataspecies <- data$Species
kills <- data$Kills
days <- data$Days
hunters <- data$Hunters
years <- 1976:2020
col.years <- paste("Y", as.character(years), sep = "")
specieslist <- c("Black Bear", "Grizzly Bear", "Blue Grouse", "BTPI", "Caribou", "Chukar", "Cougar", "All Deer",
"Ducks", "Elk", "Mountain Goat", "Geese", "Mourning Dove", "Moose", "Pheasant", "Quail",
"Ruffed Grouse","Sheep", "Spruce Grouse", "Sharp-tailed Grouse", "Wolf", "GRPA", "Ptarmigan",
"Mule Deer", "White-tailed Deer", "PART", "Turkey")
HarvList <- list()
for(s in 1:length(specieslist)){
x <- data.frame(matrix(nrow = 0, ncol = length(years) + 2))
for(i in 1:nrow(wmus.all)){
temp <- vector(length = ncol(x))
temp[1] <- specieslist[s]
temp[2] <- wmus.all$MU[i]
for(c in 3:ncol(x)){
temp[c] <- sum(c(kills[datayears == years[(c-2)] & dataspecies == specieslist[s] &
dataunits == wmus.all$MU[i]]), na.rm = T)
}
colnames(x) <- c("Species", "WMU", col.years)
x <- rbind(x, temp, stringsAsFactors = F, make.row.names =F, deparse.level = 0)
}
colnames(x) <- c("Species", "WMU", col.years)
for(t in 3:ncol(x)) x[,t] <- as.numeric(x[,t])
HarvList[[s]] <- x
}
names(HarvList) <- specieslist
for(i in 1:length(HarvList)){
temp <- HarvList[[i]]
for(c in 3:ncol(temp)) temp[,c][is.na(temp[,c])] <- 0
HarvList[[i]] <- temp
}
saveRDS(HarvList, "HarvList.rds")
## Number of Hunters
HuntList <- list()
for(s in 1:length(specieslist)){
x <- data.frame(matrix(nrow = 0, ncol = length(years) + 2))
for(i in 1:nrow(wmus.all)){
temp <- vector(length = ncol(x))
temp[1] <- specieslist[s]
temp[2] <- wmus.all$MU[i]
for(c in 3:ncol(x)){
temp[c] <- sum(c(hunters[datayears == years[(c-2)] & dataspecies == specieslist[s] &
dataunits == wmus.all$MU[i]]), na.rm = T)
}
colnames(x) <- c("Species", "WMU", col.years)
x <- rbind(x, temp, stringsAsFactors = F, make.row.names =F, deparse.level = 0)
}
colnames(x) <- c("Species", "WMU", col.years)
for(t in 3:ncol(x)) x[,t] <- as.numeric(x[,t])
HuntList[[s]] <- x
}
names(HuntList) <- specieslist
for(i in 1:length(HuntList)){
temp <- HuntList[[i]]
for(c in 3:ncol(temp)) temp[,c][is.na(temp[,c])] <- 0
HuntList[[i]] <- temp
}
saveRDS(HuntList, "HuntList.rds")
SuccessList <- list()
for(s in 1:length(specieslist)){
x <- data.frame(matrix(nrow = 0, ncol = length(years) + 2))
for(i in 1:nrow(wmus.all)){
temp <- vector(length = ncol(x))
temp[1] <- specieslist[s]
temp[2] <- wmus.all$MU[i]
for(c in 3:ncol(x)){
if(HuntList[[s]][i,c] > 0) temp[c] <- round(HarvList[[s]][i,c] / HuntList[[s]][i,c], 2)
if(HuntList[[s]][i,c] == 0) temp[c] <- 0
}
colnames(x) <- c("Species", "WMU", col.years)
x <- rbind(x, temp, stringsAsFactors = F, make.row.names =F, deparse.level = 0)
}
colnames(x) <- c("Species", "WMU", col.years)
for(t in 3:ncol(x)) x[,t] <- as.numeric(x[,t])
SuccessList[[s]] <- x
}
names(SuccessList) <- specieslist
saveRDS(SuccessList, "SuccessList.rds")
runApp()
source("C:/R_Projects/R Speedup.R")
#### 2019 New Data Format #####
setwd("Z:/ES/WILDLIFE 2016-2020/Harvest management/Harvest data/Hunter Sample/2020")
file <- "HS estimates 1976 to 2020 - preliminary - v1.xlsx"
wmus <- read_excel(path = file, sheet = "WMU level")
regions <- read_excel(path = file, sheet = "Region level")
province <- read_excel(path = file, sheet = "Province Level")
data <- rbind(wmus, regions, province)
speciescode <- unique(data$Species)
species <- c("Black Bear", "Grizzly Bear", "Blue Grouse", "BTPI", "Caribou", "Chukar", "Cougar", "All Deer",
"Ducks", "Elk", "Mountain Goat", "Geese", "Mourning Dove", "Moose", "Pheasant", "Quail", "Ruffed Grouse",
"Sheep", "Spruce Grouse", "Sharp-tailed Grouse", "Wolf", "GRPA", "Ptarmigan", "Mule Deer",
"White-tailed Deer", "PART", "Turkey")
ss <- data$Species
fss <- vector(length = length(ss))
for(i in 1:length(ss)) fss[i] <- species[which(speciescode %in% ss[i])]
data$Species <- fss
rm(ss, fss, speciescode, species)
data$WMU[data$WMU == "7A"] <- "799.1"
data$WMU[data$WMU == "7B"] <- "799.2"
setwd("Z:/ES/WILDLIFE 2016-2020/Harvest management/Harvest data/Data Code/Shiny App/Data and Mapping App/HS Data Formatting")
saveRDS(data, "HarvestData2020.rds")
### HarvList, SuccessList, and EffortList ###
data <- readRDS("HarvestData2020.rds")
wmus.all <- readRDS("ProvincialWMUs.rds")
datayears <- data$Year
dataunits <- data$WMU
dataspecies <- data$Species
kills <- data$Kills
days <- data$Days
hunters <- data$Hunters
years <- 1976:2020
col.years <- paste("Y", as.character(years), sep = "")
specieslist <- c("Black Bear", "Grizzly Bear", "Blue Grouse", "BTPI", "Caribou", "Chukar", "Cougar", "All Deer",
"Ducks", "Elk", "Mountain Goat", "Geese", "Mourning Dove", "Moose", "Pheasant", "Quail",
"Ruffed Grouse","Sheep", "Spruce Grouse", "Sharp-tailed Grouse", "Wolf", "GRPA", "Ptarmigan",
"Mule Deer", "White-tailed Deer", "PART", "Turkey")
HarvList <- list()
for(s in 1:length(specieslist)){
x <- data.frame(matrix(nrow = 0, ncol = length(years) + 2))
for(i in 1:nrow(wmus.all)){
temp <- vector(length = ncol(x))
temp[1] <- specieslist[s]
temp[2] <- wmus.all$MU[i]
for(c in 3:ncol(x)){
temp[c] <- sum(c(kills[datayears == years[(c-2)] & dataspecies == specieslist[s] &
dataunits == wmus.all$MU[i]]), na.rm = T)
}
colnames(x) <- c("Species", "WMU", col.years)
x <- rbind(x, temp, stringsAsFactors = F, make.row.names =F, deparse.level = 0)
}
colnames(x) <- c("Species", "WMU", col.years)
for(t in 3:ncol(x)) x[,t] <- as.numeric(x[,t])
HarvList[[s]] <- x
}
names(HarvList) <- specieslist
for(i in 1:length(HarvList)){
temp <- HarvList[[i]]
for(c in 3:ncol(temp)) temp[,c][is.na(temp[,c])] <- 0
HarvList[[i]] <- temp
}
saveRDS(HarvList, "HarvList.rds")
## Number of Hunters
HuntList <- list()
for(s in 1:length(specieslist)){
x <- data.frame(matrix(nrow = 0, ncol = length(years) + 2))
for(i in 1:nrow(wmus.all)){
temp <- vector(length = ncol(x))
temp[1] <- specieslist[s]
temp[2] <- wmus.all$MU[i]
for(c in 3:ncol(x)){
temp[c] <- sum(c(hunters[datayears == years[(c-2)] & dataspecies == specieslist[s] &
dataunits == wmus.all$MU[i]]), na.rm = T)
}
colnames(x) <- c("Species", "WMU", col.years)
x <- rbind(x, temp, stringsAsFactors = F, make.row.names =F, deparse.level = 0)
}
colnames(x) <- c("Species", "WMU", col.years)
for(t in 3:ncol(x)) x[,t] <- as.numeric(x[,t])
HuntList[[s]] <- x
}
names(HuntList) <- specieslist
for(i in 1:length(HuntList)){
temp <- HuntList[[i]]
for(c in 3:ncol(temp)) temp[,c][is.na(temp[,c])] <- 0
HuntList[[i]] <- temp
}
saveRDS(HuntList, "HuntList.rds")
SuccessList <- list()
for(s in 1:length(specieslist)){
x <- data.frame(matrix(nrow = 0, ncol = length(years) + 2))
for(i in 1:nrow(wmus.all)){
temp <- vector(length = ncol(x))
temp[1] <- specieslist[s]
temp[2] <- wmus.all$MU[i]
for(c in 3:ncol(x)){
if(HuntList[[s]][i,c] > 0) temp[c] <- round(HarvList[[s]][i,c] / HuntList[[s]][i,c], 2)
if(HuntList[[s]][i,c] == 0) temp[c] <- 0
}
colnames(x) <- c("Species", "WMU", col.years)
x <- rbind(x, temp, stringsAsFactors = F, make.row.names =F, deparse.level = 0)
}
colnames(x) <- c("Species", "WMU", col.years)
for(t in 3:ncol(x)) x[,t] <- as.numeric(x[,t])
SuccessList[[s]] <- x
}
names(SuccessList) <- specieslist
saveRDS(SuccessList, "SuccessList.rds")
